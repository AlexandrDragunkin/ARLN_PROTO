//-- Создание прямой дугообразной ниши
global ProtoPath;
global MacroSw;       //-- Переключатель режимов работы 0 - в пар.макро 1 - разбор.
global PanMater;      //-- Материал панелей
KarkasNumb=getcarcnumb();  //-- Порядковый номер каркаса в сцене
global g_FurnType;    //-- Тип мебельного объекта

global HoldName;      //-- Имя хозяина

getpar
xpos, ypos,zpos,      //-- Координаты точки установки
w,                    //-- Ширина
d,                    //-- Глубина
h,                    //-- Высота
TypeFill,             //-- Тип заполнения
NumFill,              //-- Количество полок или ящиков
FasType,              //-- Рисунок фасада
ShelfCut,	            //-- Заглубление полок
PrMater,              //-- Материал заполнения
FasMater,             //-- Материал фасада
BotMater,             //-- Материал дна ящика
BoxType,              //-- Тип ящика
FasInMater,           //-- Материал вставки в фасад
OpenSide,             //-- Открывание двери
HandleType,           //-- Тип ручки
HandleH,              //-- Высота установки ручки
HandleA,              //-- Угол поворота ручки
HandlePlace,          //-- Положение ручки
DoubleDoor,           //-- Двойная дверь
OpenDoor,             //-- Открытая дверь
HandleMove,           //-- Сдвиг ручки
HingeType,            //-- Тип петли
Nfasad,               //-- Фасад накладной
BandColor,            //-- Цвет кромки
BandType,             //-- Тип кромки
FixCorp,              //-- Тип крепежа
Sag;                  //-- Прогиб заполнения ниши
//------------------------------------------------------------------------------
FurnType="111101";
Namescr="ProtoParams";
defarr error[10];
NULLOUT=initarray(error,"");
position=250;  //-- Номер прототипа прямой дугообразной нищи
h_dsp=priceinfo(PrMater,"Thickness",16);
h_fas=priceinfo(FasType,"Thickness",priceinfo(FasMater,"Thickness",16),2);

NULLOUT=pushinst(1);
NULLOUT=getvarinst(1,"ShelfCut",cutSh,0);	//-- величина подреза съемной полки
NULLOUT=getvarinst(1,"FixShelfRem",FixShelfRem,0);	//-- тип крепежа съемной полки
NULLOUT=getvarinst(1,"HasDuct",HasDuct,0);
NULLOUT=getvarinst(1,"ShiftDuct",ShiftDuct,0);
NULLOUT=getvarinst(1,"WidthDuct",WidthDuct,100);
NULLOUT=getvarinst(1,"DepthDuct",DepthDuct,100);
ElemCName="Ниша прямая дугобразная"+iif(HasDuct!=0," с вырезом","");
NicheId=getprotoid("Shkaf","Ниша прямая дугообразная","ProtoMacro","NicheP");  //-- ID прототипа ниши
//------------------------------------------------------------------------------
defarr DOORARR[10] ;
furn="'230100'"
DOORTYPE=0
kol1=npgetbywhere(2,"furntype = "+furn,"DOORARR");
if (kol1>0)
{
  DOORTYPE=DOORARR[1];
}
NULLOUT=getsnap();
if MacroSw==0
{
  gosub SimpleNiche;
}
else
{
  protoobj create "Shkaf.ptl" NicheId //-- 250-й прототип "Ниша прямая дугообразная"
   "w"            w                     //-- Ширина
   "d"            d                     //-- Глубина
   "h"            h                     //-- Высота
   "TypeFill"     TypeFill              //-- Тип заполнения
   "NumFill"      NumFill               //-- Количество полок или ящиков
   "FasType"      FasType               //-- Рисунок фасада
   "ShelfCut"	    ShelfCut	            //-- Заглубление полок
   "PrMater"      PrMater               //-- Материал заполнения
   "FasMater"     FasMater              //-- Материал фасада
   "BotMater"     BotMater              //-- Материал дна ящика
   "BoxType"      BoxType               //-- Тип ящика
   "FasInMater"   FasInMater            //-- Материал вставки в фасад
   "OpenSide"     OpenSide              //-- Открывание двери
   "HandleType"   HandleType            //-- Тип ручки
   "HandleH"      HandleH               //-- Высота установки ручки
   "HandleA"      HandleA               //-- Угол поворота ручки
   "HandlePlace"  HandlePlace           //-- Положение ручки
   "DoubleDoor"   DoubleDoor            //-- Двойная дверь
   "OpenDoor"     OpenDoor              //-- Открытая дверь
   "HandleMove"   HandleMove            //-- Сдвиг ручки
   "Sag"          Sag                   //-- Прогиб ниши
   "HingeType"    HingeType             //-- Тип петли
   "Nfasad"       Nfasad                //-- Фасад накладной
   "BandColor"    BandColor             //-- Цвет кромки
   "BandType"     BandType              //-- Тип кромки
   "FixCorp"      iif(TypeFill==3,FixShelfRem,FixCorp) //-- Тип крепежа
   "HasDuct"      HasDuct               //-- Наличие короба
   "ShiftDuct"    ShiftDuct             //-- Сдвиг короба
   "WidthDuct"    WidthDuct             //-- Ширина короба
   "DepthDuct"    DepthDuct             //-- Глубина короба
	 "ShelfRemCut"  cutSh									//-- Величина подреза съемной полки
	 "FixShelfRem"  FixShelfRem						//-- Тип крепежа съемной полки
 done
  xpos ypos zpos;
  MacroSw=1;
}
NULLOUT=popinst(1);
NULLOUT=resnap();
//-- Присваиваем объекту атрибут с порядковым номером каркаса
if (isassign("KarkasNumb",0))
{
  attrobj copy record "KarkasNumb" done last 1 done;
}
else
{
  attrobj attach "KarkasNumb" done last 1 KarkasNumb;
}
if (isassign("HoldName",0))
{
  attrobj copy record "HoldName" done last 1 done;
}
else
{
  attrobj attach "HoldName" done last 1 HoldName ;
}
attrobj attach "Posit" done last 1 position;
attrobj attach "ElemName" done last 1 ElemCName;
attrobj attach "FurnType" done last 1 FurnType;
attrobj attach "Assembly" done last 1 1;        //-- Признак сборочной единицы
attrobj attach "XUnit" "YUnit" "ZUnit" done last 1 w d h;
exit;
//-----------------------------------------------------------------------------
SimpleNiche:
object_0=sysvar(60);
//----------------------------------------------------------------
macro ProtoPath+"SetConstrInit.mac";
macro ProtoPath+"SetMat.mac" PrMater;
if (TypeFill==0||TypeFill==3) //-- Если тип заполнения - полки
{
  if (NumFill>=1)
  {
    if (ShelfCut>d-h_dsp)
    {
      error[1]="Заглубление полок не может превышать глубину стола или шкафа.";
      error[2]="Значение заглубления полок не должно превышать '"+str(d-h_dsp)+"' мм.";
      error[3]=" ";
      error[4]="Убедитесь, что значение заглубления полок указано корректно."
      error[5]="Проверьте, корректно ли задано значение глубины стола или шкафа."
      macro Protopath+"ShowSmartError.mac" "Ошибка параметров заполнения" 5 error;
      cancel;
    }
    h1=int((h+h_dsp)/(NumFill+1));
    if (h1<80)
    {
      error[1]="Слишком маленькое расстояние между полками.";
      error[2]="Расстояние между полками должно быть не менее 80 мм.";
      error[3]=" ";
      error[4]="Убедитесь, что значение выстоты шкафа или стола указано корректно."
      error[5]="Проверьте, верно ли указано количество полок."
      macro Protopath+"ShowSmartError.mac" "Ошибка параметров заполнения" 5 error;
      cancel;
    }
    if (Nfasad==0)
    {
      ShelfCut=ShelfCut+h_fas;
    }
    macro ProtoPath+"SetECod.mac" "1107" ;
    // macro ProtoPath+"SetKCod.mac" "ПОЛК" w d-ShelfCut  ;
    macro ProtoPath+"SetEnam.mac" "Полка" ;
    macro ProtoPath+"SetFix.mac"  FixCorp FixCorp 0 0;
    macro ProtoPath+"SetKrom.mac" BandColor 0 0 0 BandType ;
    macro ProtoPath+"SetBend.mac" 0 0 0 Sag 0 0 0 0;
		if (TypeFill==3)
		{
		 macro ProtoPath+"SetFix.mac"  FixShelfRem FixShelfRem 0 0;
		 macro ProtoPath+"SetKrom.mac" BandColor BandType BandType BandType BandType ;
     macro ProtoPath+"SetEnam.mac" "Полка съемная" ;
     macro ProtoPath+"SetCuts.mac" cutSh cutSh 0 0;
		}
    macro ProtoPath+"MakePan.mac" 0 0 h1-h_dsp w d-ShelfCut 12;
    macro ProtoPath+"SetCuts.mac" 0 0 0 0;
    macro ProtoPath+"SetBend.mac" 0 0 0 0 0 0 0 0;
    if (HasDuct!=0) //-- Если нужен вырез, добавляем его
    {
      objident last 1 Pan;
      #Pat rectangle 3points ShiftDuct,0,0 ShiftDuct+WidthDuct,0,0 ShiftDuct+WidthDuct,DepthDuct,0;
      macro ProtoPath+"PutCutr.mac" Pan, Pat, 1, 0, 5;
      delete Pat done;
    }
    move last 1 done 0 0 h1 copy (NumFill-1);
  }
  if (FasType!=0&&TypeFill==0)
  {
    macro ProtoPath+"SetECod.mac" "1108" ;
    // macro ProtoPath+"SetKCod.mac" "ДВЕР" w  h ;
    macro ProtoPath+"SetEnam.mac" "Дверь" ;
    macro ProtoPath+"SetParFas.mac" "РисФас" ;

    macro ProtoPath+"SetFasdN.mac" FasMater FasType BandColor BandType FasInMater FasInMater ;
    macro ProtoPath+"SetDoor.mac"  OpenSide DoubleDoor OpenDoor Nfasad HingeType 0 h_dsp;

    macro ProtoPath+"SetHand.mac" 0 HandlePlace ;
    macro ProtoPath+"SetHandl.mac" HandleType HandleMove HandleH HandleA ;
    syy=sysvar(60);
    macro ProtoPath+"MakeDoorArc.mac" 0 0 0 w Sag-iif(NFasad==1,0,h_fas) h Sag 0 0 14 14 2;
    move last sysvar(60)-syy done 0,d-Sag-iif(NFasad==1,0,h_fas),0 nocopy;
  }
}
if (TypeFill==1&&NumFill>=1) //-- Если тип заполнения - ящики
{
  h1=int((h+h_dsp)/NumFill);
	if (h1<80)
  {
    error[1]="Слишком маленькая высота ящика.";
    error[2]="Высота ящика должна быть не меньше 80 мм.";
    error[3]=" ";
    error[4]="Убедитесь, что значение выстоты шкафа или стола указано корректно."
    error[5]="Проверьте, верно ли указано количество ящиков."
    macro Protopath+"ShowSmartError.mac" "Ошибка параметров заполнения" 5 error;
    cancel;
  }
	if (NumFill>=1)
	{
    macro ProtoPath+"SetHand.mac" 0 HandlePlace;
    macro ProtoPath+"SetEnam.mac" "Ящик" ;
    macro ProtoPath+"SetFasdN.mac" FasMater FasType BandColor BandType FasInMater FasInMater ;
    macro ProtoPath+"SetBox.mac" BotMater 3 Nfasad BoxType;
    macro ProtoPath+"SetHandl.mac" HandleType HandleMove HandleH HandleA ;
    macro ProtoPath+"SetBoxKr.mac" BandColor BandType ;
 	  macro ProtoPath+"SetOpenBox.mac" OpenDoor;
    NULLOUT=pushinst(1);
    macro ProtoPath+"SetArc.mac" Sag;
    macro ProtoPath+"MakeBox.mac" 0 0 0 w iif(HasDuct==0,d-Sag,d-Sag-DepthDuct) h NumFill;
    NULLOUT=popinst(1);
    if (HasDuct!=0)
    {
      move last 1 done 0,DepthDuct,0 nocopy;
    }
	}
}
if (TypeFill==2) //-- Если тип заполнения - ниша для встройки
{
  #b1 box 0 0 0 w iif(HasDuct==0,d-Sag,d-Sag-DepthDuct) h;
  if (HasDuct!=0)
  {
    move b1 done 0,DepthDuct,0 nocopy;
  }
  attrobj attach "Contact" done b1 2048;
}
//-------------------------------------------------------------------
object_3=sysvar(60)-object_0;
if (object_3==0)
{
  NULLOUT=resnap();
  exit;
}
move last object_3 done xpos,ypos,zpos nocopy;
setucs move xpos,ypos,zpos;
#Niche group last object_3 done;
if (isassign("FasadPar",0))
{
  attrobj copy record "FasadPar" done Niche done;
}
if (isassign("ScrBox",0))
{
  attrobj copy record "ScrBox" done Niche done;
}
g_FurnType=FurnType;
ScrMod=InitScratch();
err=AddScratch(ScrMod,FurnType,"w",w);
err=AddScratch(ScrMod,FurnType,"d",d);
err=AddScratch(ScrMod,FurnType,"h",h);
err=AddScratch(ScrMod,FurnType,"TypeFill",TypeFill);
err=AddScratch(ScrMod,FurnType,"NumFill",NumFill);
err=AddScratch(ScrMod,FurnType,"FasType",FasType);
err=AddScratch(ScrMod,FurnType,"ShelfCut",ShelfCut);
err=AddScratch(ScrMod,FurnType,"PrMater",PrMater);
err=AddScratch(ScrMod,FurnType,"FasMater",FasMater);
err=AddScratch(ScrMod,FurnType,"BotMater",BotMater);
err=AddScratch(ScrMod,FurnType,"BoxType",BoxType);
err=AddScratch(ScrMod,FurnType,"FasInMater",FasInMater);
err=AddScratch(ScrMod,FurnType,"OpenSide",OpenSide);
err=AddScratch(ScrMod,FurnType,"HandleType",HandleType);
err=AddScratch(ScrMod,FurnType,"HandleH",HandleH);
err=AddScratch(ScrMod,FurnType,"HandleA",HandleA);
err=AddScratch(ScrMod,FurnType,"HandlePlace",HandlePlace);
err=AddScratch(ScrMod,FurnType,"Sag",Sag);
err=AddScratch(ScrMod,FurnType,"DoubleDoor",DoubleDoor);
err=AddScratch(ScrMod,FurnType,"OpenDoor",OpenDoor);
err=AddScratch(ScrMod,FurnType,"HandleMove",HandleMove);
err=AddScratch(ScrMod,FurnType,"HingeType",HingeType);
err=AddScratch(ScrMod,FurnType,"Nfasad",Nfasad);
err=AddScratch(ScrMod,FurnType,"BandColor",BandColor);
err=AddScratch(ScrMod,FurnType,"BandType",BandType);
err=AddScratch(ScrMod,FurnType,"FixCorp",FixCorp);
err=AddScratch(ScrMod,FurnType,"HasDuct",HasDuct);
err=AddScratch(ScrMod,FurnType,"ShiftDuct",ShiftDuct);
err=AddScratch(ScrMod,FurnType,"WidthDuct",WidthDuct);
err=AddScratch(ScrMod,FurnType,"DepthDuct",DepthDuct);
err=AddScratch(ScrMod,FurnType,"ShelfRemCut",cutSh);
err=AddScratch(ScrMod,FurnType,"FixShelfRem",FixShelfRem);
NULLOUT=writescratch(ScrMod,Namescr,Niche);
NULLOUT=TermScratch(ScrMod);
NULLOUT=addattrpi(Niche,1,NicheID);
return;
